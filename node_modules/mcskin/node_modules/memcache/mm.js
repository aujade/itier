var util      = require('util');
var memcache = require('./lib/memcache');

function output(str){
  console.log(str);
}

function microtime(get_as_float) {  
    var now = new Date().getTime() / 1000;  
    var s = parseInt(now);
    return (get_as_float) ? now : (Math.round((now - s) * 1000) / 1000) + ' ' + s;  
}


var benchmark = function() {
	var count = 100000;
	start = microtime(true);
	var x = 0;
	
	for (var i=0; i<=count; i++) {
		mcClient.get('test', function(err, data) {
			x += 1;
			if (x == count) {
				end = microtime(true);
				util.debug("get count : " + count + "total time: " + (end - start));
			}
		});
	}
	
	mcClient.close();
};

var setKey = function() {
	mcClient.set('test', 'hello \r\n node-memcache', function(err, response) {
		mcClient.get('test', function(err, data) {
			util.debug(data);
			mcClient.close();
		});
	});
};

var version = function() {
	mcClient.version(function(err, version) {
		util.debug(version);
		mcClient.close();
	});
};

var incr = function() {
	mcClient.increment('x', 2, function(err, new_value) {
		util.debug(new_value);
		mcClient.close();
	});
};

var decr = function() {
	mcClient.decrement('x', 1, function(err, new_value) {
		util.debug(new_value);
		mcClient.close();
	});
};

var MultiBench = function() {
	var count = 100000;
	start = microtime(true);
	var x = 0;
	
	for (var i=0; i<=count; i++) {
		mcClient.get('test', function(err, data) {
			x += 1;
			if (x == count) {
				end = microtime(true);
				util.debug("get count : " + count + "total time: " + (end - start));
			}
		});
	}
	for (var i=0; i<=count; i++) {
		mcClientB.get('test', function(err, data) {
			x += 1;
			if (x == count) {
				end = microtime(true);
				util.debug("get count : " + count + "total time: " + (end - start));
			}
		});
  }

	mcClient.close();
}
var mcClient = new memcache.Client();
//var mc_free = false;
mcClient.on("connect", function() {
  output("memcache connected ...");
//  mc_free = true;
//  if(mc_free_b) MultiBench();

});

/*
var mcClientB = new memcache.Client();
var mc_free_b = false;
mcClientB.on("connect", function() {
  output("memcache connected ...");
  mc_flag_b = true;
  if(mc_free) MultiBench();
});

mcClientB.connect();
*/

mcClient.connect();
//mcClient.addHandler(onConnect);
//mcClient.addHandler(setKey);
//mcClient.addHandler(version);
mcClient.addHandler(benchmark);

